{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":""},{"location":"#introduction-to-the-lab","title":"Introduction to the Lab","text":"<p>Don't worry - you are not expecting to come up with a project from the ground up. Instead, we'll be working on a small sample project that you can find in this repository.</p> <p>In this project, you will get to know the real benefits of NetDevOps by knowing open testing automation tools and you will be building your own setup and seeing how it works. The goal will be to create a complete environment that demonstrates the following benefits across the whole network:</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To follow this Workshop, you should have these things:</p> <ul> <li>VPN Client for connection to dCloud (Cisco Secure Client)</li> </ul>"},{"location":"#lab-topology","title":"Lab Topology","text":"<p>Here's a brief outline of the dCloud setup we'll use for this lab:</p>"},{"location":"agenda/","title":"Agenda","text":""},{"location":"agenda/#day-1","title":"Day 1","text":"<p>Cisco Network Services Orchestrator [3](#cisco-network-services-orchestrator)</p> <p>1 - Connect to the Workstation [3](#connect-to-the-workstation)</p> <p>1.1 - Install NSO and NEDs [4](#install-nso-and-neds)</p> <p>1.2 -- Registering XRd routers [9](#registering-xrd-routers)</p> <p>1.3 - Configure Devices using NSO [11](#configure-devices-using-nso)</p> <p>1.4 - Use Rollback's [13](#use-rollbacks)</p> <p>1.5 - Use NSO capabilities to detect Out-of-Band device configurations [15](#use-nso-capabilities-to-detect-out-of-band-device-configurations)</p> <p>1.6 - Create Device Groups and Device Templates [18](#create-device-groups-and-device-templates)</p> <p>1.7 - Create a Simple NSO Service [23](#create-a-simple-nso-service)</p> <p>1.8 - Create Role Based and Resource Based Access Control rules [37](#create-role-based-and-resource-based-access-control-rules)</p> Click here to show solution <pre><code>ssh developer@10.10.20.50\n</code></pre> Repository content<pre><code>cd ${HOME}/nso_cicd\ntree\n.\n\u251c\u2500\u2500 packages\n\u2502   \u2514\u2500\u2500 loopback\n\u2502       \u251c\u2500\u2500 load-dir\n\u2502       \u2502   \u2514\u2500\u2500 loopback.fxs\n\u2502       \u251c\u2500\u2500 package-meta-data.xml\n\u2502       \u251c\u2500\u2500 src\n\u2502       \u2502   \u251c\u2500\u2500 Makefile\n\u2502       \u2502   \u2514\u2500\u2500 yang\n\u2502       \u2502       \u2514\u2500\u2500 loopback.yang\n\u2502       \u251c\u2500\u2500 templates\n\u2502       \u2502   \u2514\u2500\u2500 loopback-template.xml\n\u2502       \u2514\u2500\u2500 test\n\u2502           \u251c\u2500\u2500 internal\n\u2502           \u2502   \u251c\u2500\u2500 lux\n\u2502           \u2502   \u2502   \u251c\u2500\u2500 basic\n\u2502           \u2502   \u2502   \u2502   \u251c\u2500\u2500 Makefile\n\u2502           \u2502   \u2502   \u2502   \u2514\u2500\u2500 run.lux\n\u2502           \u2502   \u2502   \u2514\u2500\u2500 Makefile\n\u2502           \u2502   \u2514\u2500\u2500 Makefile\n\u2502           \u2514\u2500\u2500 Makefile\n\u251c\u2500\u2500 pipelines\n\u2502   \u2514\u2500\u2500 gitlab-ci.yml\n\u251c\u2500\u2500 pipeline_utils\n\u2502   \u2514\u2500\u2500 environments.yml\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 loopback-test\n        \u2514\u2500\u2500 loopback-test.py\n\n14 directories, 13 files\n</code></pre> Gitlab runner .gitlab-ci.yml<pre><code>  ---\n  dummy-job:\n    script:\n      - echo \"This pipeline is triggered successfully!\"\n</code></pre>"},{"location":"day1/","title":"Day 1 instructions","text":""},{"location":"day1/#10-connect-to-the-workstation","title":"1.0 Connect to the Workstation","text":"<p>Please click on the \"Win11\" option, and then select \"VM Console\" from the Remote Access.</p> <p>After selecting \"VM Console\", you will be redirected to the Windows operating system interface. If you see \u201cYou\u2019re almost done setting up your PC,\u201d then click \u201cRemind me in 3 days.\u201d</p> <p>Alternatively, you can choose an Ubuntu Desktop. Please click on the \"<code>Ubuntu 24.04 Desktop</code>\" and then select \"VM Console\" from the Remote Access.</p>"},{"location":"day1/#11-install-nso-and-neds","title":"1.1 Install NSO and NEDs","text":"<ul> <li>Click on Visual Studio Code shortcut and work on the Terminal window.</li> </ul> <pre><code>cisco@xrd-host:~$ cd NSO-6.5-free/\ncisco@xrd-host:~/NSO-6.5-free$ ls *.bin\nncs-6.5-cisco-asa-6.18.23-freetrial.signed.bin\nncs-6.5-cisco-ios-6.109.4-freetrial.signed.bin\nncs-6.5-cisco-iosxr-7.69-freetrial.signed.bin\nncs-6.5-cisco-nx-5.27.3-freetrial.signed.bin\nnso-6.5-freetrial.container-image-build.linux.x86_64.signed.bin\nnso-6.5-freetrial.container-image-prod.linux.x86_64.signed.bin\nnso-6.5-freetrial.linux.x86_64.signed.bin\n</code></pre> <p>Note</p> <p>To extract the installer, first create a <code>work</code> directory. Then, run <code>bash ../nso-6.5-freetrial.linux.x86_64.signed.bin --skip-verification</code>. The <code>--skip-verification</code> flag is used to bypass the certification check.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free$ mkdir work\ncisco@xrd-host:~/NSO-6.5-free$ cd work\ncisco@xrd-host:~/NSO-6.5-free/work$\nbash ../nso-6.5-freetrial.linux.x86_64.signed.bin --skip-verification\nUnpacking...\ncisco@xrd-host:~/NSO-6.5-free/work$\n</code></pre> <p>Execute the nso-6.5.linux.x86_64.installer.bin with the \u201c\u2014local-install\u201d flag and choose the installation directory.</p> <p>Alternatively, you can choose an Ubuntu Desktop. Please click on the \"Ubuntu 24.04 Desktop\" and then select \"VM Console\" from the Remote Access.</p>"},{"location":"day1/#11-install-nso-and-neds_1","title":"1.1 - Install NSO and NEDs","text":"<ul> <li>Click on Visual Studio Code shortcut and work on the Terminal window.</li> </ul> <pre><code>cisco@xrd-host:~$ cd NSO-6.5-free/\ncisco@xrd-host:~/NSO-6.5-free$ ls *.bin\nncs-6.5-cisco-asa-6.18.23-freetrial.signed.bin\nncs-6.5-cisco-ios-6.109.4-freetrial.signed.bin\nncs-6.5-cisco-iosxr-7.69-freetrial.signed.bin\nncs-6.5-cisco-nx-5.27.3-freetrial.signed.bin\nnso-6.5-freetrial.container-image-build.linux.x86_64.signed.bin\nnso-6.5-freetrial.container-image-prod.linux.x86_64.signed.bin\nnso-6.5-freetrial.linux.x86_64.signed.bin\n</code></pre> <p>Note</p> <p>First, you need to extract installer <code>\u201c.bin\u201d</code> file. To avoid messing up the directory, create a new directory named \u201cwork\u201d and execute <code>\u201cbash ../nso-6.5-freetrial.linux.x86_64.signed.bin\u201d</code>. Using <code>\u201c--skip-verification\u201d</code> skips certification check.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free$ mkdir work\ncisco@xrd-host:~/NSO-6.5-free$ cd work\ncisco@xrd-host:~/NSO-6.5-free/work$\nbash ../nso-6.5-freetrial.linux.x86_64.signed.bin --skip-verification\nUnpacking...\ncisco@xrd-host:~/NSO-6.5-free/work$\n</code></pre> <p>Execute the nso-6.5.linux.x86_64.installer.bin with the \u201c\u2014local-install\u201d flag and choose the installation directory.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free/work$\nbash nso-6.5.linux.x86_64.installer.bin --local-install ~/NSO-INSTALL\nINFO\u00a0 Using temporary directory /tmp/ncs_installer.780985 to stage NCS installation bundle\nINFO\u00a0 Unpacked ncs-6.5 in /home/cisco/NSO-INSTALL\nINFO\u00a0 Found and unpacked corresponding DOCUMENTATION_PACKAGE\nINFO\u00a0 Found and unpacked corresponding EXAMPLE_PACKAGE\nINFO\u00a0 Found and unpacked corresponding JAVA_PACKAGE\nINFO\u00a0 Generating default SSH hostkey (this may take some time)\nINFO\u00a0 SSH /home/cisco/NSO-INSTALL/etc/ncs/ssh/ssh_host_ecdsa_key hostkey generated\nINFO\u00a0 SSH /home/cisco/NSO-INSTALL/etc/ncs/ssh/ssh_host_ed25519_key hostkey generated\nINFO\u00a0 Generating self-signed certificates for HTTPS\nINFO\u00a0 Environment set-up generated in /home/cisco/NSO-INSTALL/ncsrc\nINFO\u00a0 NSO installation script finished\nINFO\u00a0 Found and unpacked corresponding NETSIM_PACKAGE\nINFO\u00a0 NCS installation complete\n</code></pre> <p>Go to the installation folder and source NSO <pre><code>cisco@xrd-host:~/NSO-6.5-free/work$ cd ~/NSO-INSTALL/\ncisco@xrd-host:~/NSO-INSTALL$ source ncsrc\n</code></pre></p> <p>Execute the NSO Setup script <pre><code>cisco@xrd-host:~/NSO-INSTALL$ ncs-setup --dest nso-instance\n</code></pre></p> <p>Change directory to the \u201cnso-instance\u201d folder and find \u201cncs.conf\u201d.</p> <pre><code>cisco@xrd-host:~/NSO-INSTALL$ cd nso-instance/\ncisco@xrd-host:~/NSO-INSTALL/nso-instance$ ls\nREADME.ncs\u00a0 logs\u00a0 ncs-cdb\u00a0 ncs.conf\u00a0 packages\u00a0 scripts\u00a0 state\n</code></pre> <p>Note</p> <p>From NSO 6.5, WebUI and RESTCONF are allowed only to NSO server\u2019s hostname (such as \u201clocalhost\u201d). To allow an access via IP address, following line has to be added to ncs.conf. Add <code>&lt;server-alias&gt;198.18.134.27&lt;/server-alias&gt;</code> to line 330 and save the file.</p> <p>Once added, start NSO by executing <code>ncs</code> command. <pre><code>cisco@xrd-host:~/NSO-INSTALL/nso-instance$ ncs\n</code></pre></p> <p>Check if NSO is running</p> <pre><code>cisco@xrd-host:~/NSO-INSTALL/nso-instance$ ncs --status | grep started\n</code></pre> <p>status: started</p> <p>To log in to NSO via the Web UI, open Firefox and access following URL: http://198.18.134.27:8080/login.html</p> <p>You can log in using the default username and password, which are \"admin\" for both the username and password fields. After logging in, you will be directed to the main page, which displays the available applications and components provided by NSO.</p> <p>Please navigate to the \"Config Editor\" section.</p> <p>Since this is a fresh installation and we do not have any packages yet, let's proceed by adding the Network Element Drivers (NEDs).</p> <p>In the \"~/NSO-6.5-free\" folder, you should find some file starting with <code>ncs-</code> and they are NED packages.</p> <pre><code>cisco@xrd-host:~/NSO-INSTALL/nso-instance$ cd ~/NSO-6.5-free/\ncisco@xrd-host:~/NSO-6.5-free$ ls ncs*\nncs-6.5-cisco-asa-6.18.23-freetrial.signed.bin\u00a0 ncs-6.5-cisco-iosxr-7.69-freetrial.signed.bin\nncs-6.5-cisco-ios-6.109.4-freetrial.signed.bin\u00a0 ncs-6.5-cisco-nx-5.27.3-freetrial.signed.bin\ncisco@xrd-host:~/NSO-6.5-free$\n</code></pre> <p>You also need to extract NED files. To avoid messing up the directory, go to the work folder and execute <code>bash ../&lt;ned.signed.bin&gt;</code> commands. Using <code>--skip-verification</code> skips certification check.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free$ cd work/\ncisco@xrd-host:~/NSO-6.5-free/work$\nbash ../ncs-6.5-cisco-iosxr-7.69-freetrial.signed.bin --skip-verification\nUnpacking...\ncisco@xrd-host:~/NSO-6.5-free/work$\n</code></pre> <p>\u201c<code>ncs-6.5-cisco-iosxr-7.69.tar.gz</code>\u201d file is the NED package. Copy the file to nso-instance/packages folder.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free/work$\ncp ncs-6.5-cisco-iosxr-7.69.tar.gz ~/NSO-INSTALL/nso-instance/packages/\n</code></pre> <p>Please return to the NSO Web UI, go to <code>ncs:packages</code> and select \u201cActions\u201d, then click the \"Reload\" button for the packages.</p> <p>After executing the \"Run reload action\" button, you should now be able to see the \"<code>cisco-ios-xr</code>\" package in the list.</p> <p>Now that we have added our Network Element Driver (NED), let's navigate to the \"Devices\" section. Currently, there are no devices listed. However, we have two options to add them: manually by clicking on the \"+\" button, or programmatically using scripts or APIs.</p>"},{"location":"day1/#12-registering-xrd-routers","title":"1.2 \u2013 Registering XRd routers","text":"<p>There are two XRd routers running on the server which you have installed NSO. Please confirm they are running by executing <code>docekr ps</code>.</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free/work$ docker ps\nCONTAINER ID\u00a0\u00a0 IMAGE\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 COMMAND\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 CREATED\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 STATUS\u00a0\u00a0\u00a0\u00a0\u00a0 PORTS\u00a0\u00a0\u00a0\u00a0 NAMES\n8502937299d3\u00a0\u00a0 ios-xr/xrd-control-plane:25.2.1\u00a0\u00a0 \"/usr/local/sbin/init\"\u00a0\u00a0 5 weeks ago\u00a0\u00a0 Up 4 days\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 xr-2\n2d77e0ef76f7\u00a0\u00a0 alpine:3.15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"/bin/sh -c 'ip rout\u2026\"\u00a0\u00a0 5 weeks ago\u00a0\u00a0 Up 4 days\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 source\n4a68f412191b\u00a0\u00a0 ios-xr/xrd-control-plane:25.2.1\u00a0\u00a0 \"/usr/local/sbin/init\"\u00a0\u00a0 5 weeks ago\u00a0\u00a0 Up 4 days\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 xr-1\n593c076cbbe7\u00a0\u00a0 alpine:3.15\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"/bin/sh -c 'ip rout\u2026\"\u00a0\u00a0 5 weeks ago\u00a0\u00a0 Up 4 days\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dest\ncisco@xrd-host:~/NSO-6.5-free/work$\n</code></pre> <p>A device template has been prepared to load these devices. Go to NSO-6.5-free and load \u201cdevices.xml\u201d by using the \u201cncs_load\u201d command to load them. -l ( load ) -m ( merge )</p> <pre><code>cisco@xrd-host:~/NSO-6.5-free/work$ cd ~/NSO-6.5-free/\ncisco@xrd-host:~/NSO-6.5-free$ ncs_load -l -m devices.xml\n</code></pre> <p>Go back to NSO and click on Devices and you see two XRd routers there.</p> <p>The first thing you need to do after a device to NSO is execute the \u201c<code>sync-from</code>\u201d so you update NSO CDB with the device configuration. Select all devices and make a <code>sync-from</code></p> <p>Note</p> <p>If <code>sync-from</code> failed, please do \u201c<code>fetch ssh host keys</code>\u201d and try again.</p>"},{"location":"day1/#13-configure-devices-using-nso","title":"1.3 - Configure Devices using NSO","text":"<p>You can enter in ios-xr-0 to verify interface configurations. To navigate in the configurations, you can use the Top bar (where I typed \u201cconfi\u201d ) or scroll down and look for what you want to configure.</p> <p>You can follow the path and verify the <code>GigabitEthernet0/0/0/0</code> configuration</p> <p>Full Path: <code>/ncs:devices/device{xr-1}/config/cisco-ios-xr:interface/GigabitEthernet{0/0/0/0}/ipv4/address/</code></p> <p>Let\u2019s make a change in the IP address. To do it, you just need to click on Edit Config and then change the field IP. Please change address from \u201c<code>10.1.1.3</code>\u201d to \u201c<code>10.1.1.30</code>\u201d.</p> <p>You can notice there is a green bar on the left of the tile that you edited. This means there is a candidate configuration on-going, and this configuration will only be pushed to the device after you commit.</p> <p>Let\u2019s go the <code>Tools &gt; Commit Manager</code> and see \u201c<code>config</code>\u201d tab.</p> <p>In the commit manager we have a diff view like on github. If we agree with the changes, we click on commit.</p> <p>After our commit is done, we can see a rollback is created. This is because, every time we make a commit in NSO we create a rollback file that allow us to revert what we did.</p> <p>If we go back to the router, we can see that our device already has the new IP on the Loopback Interface</p> <pre><code>cisco@xrd-host:~$ ssh admin@172.30.0.2\n(admin@172.30.0.2) Password: (password = cisco123)\nLast login: Tue Sep 30 03:08:41 2025 from 172.30.0.1\n\nRP/0/RP0/CPU0:xr-1#show run interface gigabitEthernet 0/0/0/0\nTue Sep 30 03:10:55.127 UTC\n! Configure left data port\ninterface GigabitEthernet0/0/0/0\n\u00a0ipv4 address 10.1.1.30 255.255.255.0\n!\n\nRP/0/RP0/CPU0:xr-1#\n</code></pre>"},{"location":"day1/#14-use-rollbacks","title":"1.4 - Use Rollback\u2019s","text":"<p>To Rollback this we just need to go back to Commit Manager, click on \u201c<code>Load/Save</code>\u201d Button and choose the rollback file that we want.</p> <p>We can see the user that made the commit and what northbound interface was used. In this case was the user admin via webui. We click on load, and we can see that the change will be reverted.</p> <p>After the commit we can check on the device that the change was reverted.</p> <pre><code>RP/0/RP0/CPU0:xr-1#show run interface gigabitEthernet 0/0/0/0\nTue Sep 30 03:13:12.733 UTC\n! Configure left data port\ninterface GigabitEthernet0/0/0/0\n\u00a0ipv4 address 10.1.1.3 255.255.255.0\n!\nRP/0/RP0/CPU0:xr-1#\n</code></pre>"},{"location":"day1/#15-use-nso-capabilities-to-detect-out-of-band-device-configurations","title":"1.5 - Use NSO capabilities to detect Out-of-Band device configurations","text":"<p>So, now let\u2019s see one of the main NSO capabilities (check-sync, sync-from, sync-to)</p> <p>Login into xr-1 device using SSH and configure the Loopback 100 interface. <pre><code>RP/0/RP0/CPU0:xr-1#configure terminal\nTue Sep 30 03:15:28.503 UTC\nRP/0/RP0/CPU0:xr-1(config)#interface Loopback 100\nRP/0/RP0/CPU0:xr-1(config-if)#description out-of-band change\nRP/0/RP0/CPU0:xr-1(config-if)#commit\nTue Sep 30 03:15:40.348 UTC\nRP/0/RP0/CPU0:xr-1(config-if)#end\nRP/0/RP0/CPU0:xr-1#show run interface Loopback 100\nTue Sep 30 03:15:44.240 UTC\ninterface Loopback100\n\u00a0description out-of-band change\n!\n\nRP/0/RP0/CPU0:xr-1#\n</code></pre></p> <p>Since this change was done out of NSO we can go to NSO WEB UI / CLI and see if the device is in sync.</p> <p>We got a red alert because this change was done out of NSO. If we click on Compare-config we can see exactly what was done out of NSO.</p> <p>And now we\u2019ve 2 options</p> <p>Option 1: We \u201c<code>SYNC-FROM</code>\u201d the device</p> <p>Option 2: We \u201c<code>SYNC-TO</code>\u201d device</p> <p>If we go with Option 1, we will grab the configuration that was done in the device without using NSO and push to NSO. If we use the Option 2, we will push to the device the configuration that NSO had previously about the device.</p> <p>In this case we want to delete that configuration that was done without NSO so we will \u201c<code>sync-to</code>\u201d</p> <p>We can now click on Check-Sync and confirm that both device and NSO device configuration are the same</p> <p>If we login to the device, we will confirm that the VTP configuration is not there anymore</p> <pre><code>RP/0/RP0/CPU0:xr-1#show run interface Loopback 100\nTue Sep 30 03:19:34.654 UTC\n% No such configuration item(s)\n\nRP/0/RP0/CPU0:xr-1#\n</code></pre>"},{"location":"day1/#16-create-device-groups-and-device-templates","title":"1.6 - Create Device Groups and Device Templates","text":"<p>Ok, so what if we want to apply configurations to several devices at the same time? Let\u2019s do it. Let\u2019s create a device Group.</p> <p>Go into Devices and select the \u201cDevice groups\u201d tab.</p> <p>Click \u201c+ Add device group\u201d button.</p> <p>Add a name like \u201cios-xr-devices\u201d and click Create. Then select devices and press \u201c+Add to device group\u201d.</p> <p>Click \u201cCreate device group\u201d button. Following should be the result.</p> <p>After creating a Device group, let\u2019s create a Device Template so we can create a config that we will spread across all the devices in the group with just few clicks.</p> <p>Go to the \u201cConfiguration Editor\u201d and choose the \u201c<code>ncs:devices</code>\u201d module and click \u201cEdit config\u201d in the top menu.</p> <p>In the template tile, click on the + Button</p> <p>Enter in the template and select the NED that we\u2019re using (<code>cisco-iosxr</code>) and click Confirm.</p> <p>Click on the NED to setup the configuration.</p> <p>Now click on the config (inside the NED)</p> <p>And now you just need to make the configurations that you want to apply. Let\u2019s create a DNS configuration. Look for Domain.</p> <p>Add the Domain name and name-server.</p> <p>Now, we go to the commit manager and let\u2019s see the differences.</p> <p>From the config diff we can see that we\u2019ve created a device-group and the configuration template that we\u2019ve created.</p> <p>After commit, we can now go to the Device Group and Apply the Template.</p> <p>Go to the Configuration Editor, \u201c<code>ncs:devices</code>\u201d module and click on the recently created device-group \u201c<code>ios-xr-devices</code>\u201d the click \u201cActions\u201d in the top menu.</p> <p>Then we click on \u201cApply-Template\u201d button</p> <p>And now, select the \u201ctemplate-name\u201d that we\u2019ve created (you might need to scroll up).</p> <p>Scroll down and click on \u201cRun apply-template action\u201d.</p> <p>We can observe the apply-template result \u201cok\u201d for each device present in the device group.</p> <p>If we go inside the Device CLI we can see that the configurations were applied.</p> <pre><code>cisco@xrd-host:~$ ssh admin@172.30.0.2\n(admin@172.30.0.2) Password: (password=cisco123)\nLast login: Tue Sep 30 09:31:58 2025 from 172.30.0.1\n\nRP/0/RP0/CPU0:xr-1#show run domain\nTue Sep 30 09:36:10.562 UTC\ndomain name-server 2.2.2.2\n\nRP/0/RP0/CPU0:xr-1#\n</code></pre> <p>Note</p> <p>NTP configuration is not supported on XRd. Need a different scenario! </p>"},{"location":"day1/#17-create-a-simple-nso-service","title":"1.7 - Create a Simple NSO Service","text":"<p>Templates are very flexible and easy to create. But, they lack of consistency. If someone goes thought NSO and change one configuration that you\u2019ve done via template, you don\u2019t have an easy way to see it and rollback. For that, you have the NSO Services.</p> <p>An NSO service will allow you to see if the configuration that you applied is still present on the devices. And if someone changed, we could compare-configs and re-deploy if necessary.</p> <p>First step is to create a service.</p> <p>NSO already brings a script that creates a service skeleton.</p> <p>Use the command \u201c<code>ncs-make-package -h</code>\u201d</p> <pre><code>RP/0/RP0/CPU0:xr-1#exit\nConnection to 172.30.0.2 closed.\ncisco@xrd-host:~$ ncs-make-package -h\n\nUsage: ncs-make-package [options] package-name\n\u00a0 ncs-make-package --netconf-ned DIR package-name\n\u00a0 ncs-make-package --lsa-netconf-ned DIR package-name\n\u00a0 ncs-make-package --generic-ned-skeleton package-name\n\u00a0 ncs-make-package --snmp-ned DIR package-name\n\u00a0 ncs-make-package --service-skeleton TYPE package-name\n\u00a0 ncs-make-package --data-provider-skeleton package-name\n\u00a0 ncs-make-package --erlang-skeleton package-name\n\u00a0 ncs-make-package --nano-service-skeleton TYPE package-name\n\n\u00a0\u00a0\u00a0\u00a0\u00a0 where TYPE is one of:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 java\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Java based service\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 java-and-template\u00a0\u00a0\u00a0\u00a0 Java service with template\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 python\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Python based service\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 python-and-template\u00a0\u00a0 Python service with template\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 template\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Template service (no code)\n\n\u00a0 &lt;\u2026output omitted for brevity\u2026&gt;\n</code></pre> <p>You can see that we\u2019ve many options here.</p> <p>Python and Java options are when we want to apply templates/services, based on logic. Imagine you want to apply QOS data to a device interface but only based on the interface high utilization. You can push that data via external APIs and only send the device configs according to what you receive.</p> <p>Let\u2019s choose the python-and-template option. (Use it inside the packages folder, otherwise you will have to copy the folder there after)</p> <pre><code>cisco@xrd-host:~$ cd NSO-INSTALL/nso-instance/packages/\n\ncisco@xrd-host:~/NSO-INSTALL/nso-instance/packages$  \nncs-make-package --service-skeleton python-and-template NTP\n</code></pre> <p>Now, let\u2019s open the VS Code to build our script.</p> <p>Choose the NSO folder and click Ok. Expand the explorer until the packages folder under nso-instance.</p> <p>After you run the script, you will find this structure</p> <p>package-meta-data.xml is where you will find the service version and other useful information</p> <p>Then you have the XML file and the YANG file.</p> <p>This is what we will find in the XML file</p> <p>And this is what we will find on the YANG file:</p> <p>Our next step will be:</p> <p>Go to NSO and make the configurations that we want to automate via the service.</p> <p>After all the configs are done instead of doing the commit, we will ask for the output of the configurations to be sent in XML.</p> <pre><code>cisco@xrd-host:~/NSO-INSTALL/nso-instance/packages$ ncs_cli -Cu admin\n\nUser admin last logged in 2025-09-30T09:49:14.561558+00:00, to xrd-host, from 10.16.68.225 using cli-ssh\nadmin connected from 10.16.68.225 using ssh on xrd-host\nadmin@ncs# config\nEntering configuration mode terminal\n\nCurrent configuration users:\nadmin http (webui from 198.18.133.100) on since 2025-09-30 09:07:42 terminal mode\nadmin@ncs(config)# devices device xr-1\nadmin@ncs(config-device-xr-1)# config\nadmin@ncs(config-config)# ntp\nadmin@ncs(config-ntp)# server 172.16.22.44 minpoll 8 maxpoll 12\n\nadmin@ncs(config-ntp)# commit dry-run outformat xml\n\nresult-xml {\n\n\u00a0\u00a0\u00a0 local-node {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 data &lt;devices xmlns=\"http://tail-f.com/ns/ncs\"&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;device&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;name&gt;xr-1&lt;/name&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;config&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;ntp xmlns=\"http://tail-f.com/ned/cisco-ios-xr\"&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;server&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;server-list&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;name&gt;172.16.22.44&lt;/name&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;minpoll&gt;8&lt;/minpoll&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;maxpoll&gt;12&lt;/maxpoll&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/server-list&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/server&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/ntp&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/config&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/device&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;/devices&gt;\n\u00a0\u00a0\u00a0 }\n\n}\n</code></pre> <p>Now, we grab the XML that we got from the NSO cli config and we paste into the skeleton XML file that was generated.</p> <p>We only grab what is inside the  flags.</p> <pre><code>&lt;ntp xmlns=\"http://tail-f.com/ned/cisco-ios-xr\"&gt;\n\u00a0\u00a0\u00a0\u00a0 &lt;server&gt;\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 &lt;server-list&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 &lt;name&gt;172.16.22.44&lt;/name&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;minpoll&gt;8&lt;/minpoll&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;maxpoll&gt;12&lt;/maxpoll&gt;\n\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0&lt;/server-list&gt;\n\u00a0\u00a0\u00a0\u00a0 &lt;/server&gt;\n&lt;/ntp&gt;\n</code></pre> <p>This should be the result.</p> <p>If we want to apply this static config. We just need to compile the service and we\u2019re good to go.</p> <p>But, let\u2019s see how we define variables.</p> <p>In this list I see 3 inputs: - Server IP-address - Minpool - Maxpool</p> <p>After defining the variables our XML should look like this</p> <p>Going to the YANG after setting up the definition for each variable they should look like this.</p> <p>So we will setup as mandatory the server-address and then the minpoll and maxpoll we setup as non-mandatory and with default values.</p> <p>After all of this is done, we go to the packages folder. Change Directory to NTP/src</p> <p>And apply the \u201cmake\u201d command.</p> <p><pre><code>admin@ncs(config-ntp)# end\nUncommitted changes found, commit them? [yes/no/CANCEL] no\nadmin@ncs# exit\ncisco@xrd-host:~/NSO-INSTALL/nso-instance/packages$ cd NTP/src/\ncisco@xrd-host:~/NSO-INSTALL/nso-instance/packages/NTP/src$ make\nmkdir -p ../load-dir\n/home/cisco/NSO-INSTALL/bin/ncsc\u00a0 `ls NTP-ann.yang\u00a0 &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo \"-a NTP-ann.yang\"` \\\n\u00a0\u00a0\u00a0\u00a0 --fail-on-warnings \\\n\u00a0\u00a0\u00a0\u00a0 \u00a0\\\n\u00a0\u00a0\u00a0\u00a0 -c -o ../load-dir/NTP.fxs yang/NTP.yang\n</code></pre> cisco@xrd-host:~/NSO-INSTALL/nso-instance/packages/NTP/src$</p> <p>Then, we should go to NSO, and ask for a package reload. Make sure the result is true.</p> <pre><code>cisco@xrd-host:~/NSO-INSTALL/nso-instance/packages/NTP/src$  \nncs_cli -Cu admin\nUser admin last logged in 2025-09-30T09:58:35.496282+00:00, to xrd-host, from 10.16.68.225 using cli-ssh\nadmin connected from 10.16.68.225 using ssh on xrd-host\nadmin@ncs# packages reload\n&gt;&gt;&gt; System upgrade is starting.\n&gt;&gt;&gt; Sessions in configure mode must exit to operational mode.\n&gt;&gt;&gt; No configuration changes can be performed until upgrade has completed.\n\n&gt;&gt;&gt; System upgrade has completed successfully.\n\nreload-result {\n\u00a0\u00a0\u00a0 package NTP\n\u00a0\u00a0\u00a0 result true\n}\nreload-result {\n\u00a0\u00a0\u00a0 package cisco-iosxr-cli-7.69\n\u00a0\u00a0\u00a0 result true\n}\n\nadmin@ncs#\n</code></pre> <p>After the reload you will see the NTP service package that we\u2019ve just created.</p> <p>Going back to the Homepage we click on the \u201cServices\u201d</p> <p>We select the NTP service that we\u2019ve created. Click on \u201c+ Add service\u201d then again click + button.</p> <p>We should give a service name (help us identify the configs applied) and setup the mandatory arguments, in our case, the server-address</p> <p>Service Created! Let\u2019s add the devices that we want to affect with the service.</p> <p>Add the devices you want by clicking on Edit Config and on section device select it</p> <p>We can keep the minpoll and maxpoll with the default values. And, now, if we go to the commit manager we will see the configs applied to all the devices that we\u2019ve selected.</p> <p>If we click on native config, we can even see the native commands that NSO will send to the devices.</p> <p>After commit, we can now see if the service is in Sync</p> <p>Now, to see the how powerful the services are let\u2019s go inside 2 devices, ios-xr-2 and ios-xr-3 and delete the NTP config.</p> <p>Go to the Device Manager, click on IOS-XR-2 and delete the ntp server configs by clicking on Edit Config, selecting them and clicking on the \u201c-\u201c button. Then repeat for ios-xr-3.</p> <p>Go to the commit manager and press \u201cCommit\u201d</p> <p>Now, if we go back to the \u201cService Manager\u201d and we click on \u201cCheck-Sync\u201d we will get a RED signal.</p> <p>By clicking on Re-deploy Dry-Run</p> <p>We will see exactly what needs to be added to the devices for them to be compliant with the service. And to configure the devices again we just need to click on re-deploy.</p> <p>And, the service was re-deployed. If we connect to ios-xr-2 and make a show-run we can see that the configs are there again.</p> <pre><code>cisco@nso-613:~/NSO-TEST/nso-instance/packages/NTP/src$\nncs-netsim cli-c ios-xr-2\nios-xr-2# show run\nadmin\n\u00a0exit-admin-config\n!\ndomain name cisco.com\ndomain name-server 2.2.2.2\nntp\n\u00a0peer 192.168.22.33\n\u00a0server 172.16.22.44 minpoll 8 maxpoll 12\nexit\nvtp mode off\n</code></pre>"},{"location":"day1/#18-create-role-based-and-resource-based-access-control-rules","title":"1.8 - Create Role Based and Resource Based Access Control rules","text":"<p>In this section the idea is to show you how we can create Role Based and Resource Based Access Control rules in NSO.</p> <p>The first step is to add a new user.</p> <p>In the Configuration Editor we navigate to <code>aaa:aaa</code> module</p> <p>Then we go to the authentication/users then we click on Edit Config and the \u201c+\u201d button</p> <p>Let\u2019s create the user \u201cread_user\u201d</p> <p>After this we can \u201cCommit\u201d</p> <p>And login to the new recently created user</p> <p>We can now go to the Device Manager and check if this user is able to do all the normal operations</p> <p>And, as we can see Ping is not possible because the new user does not belong to any authgroup.</p> <p>The Authgroup is the feature that allows mapping the NSO local user to the device local user. Each Device much belong to an authgroup, and each user much be present in one authgroup as well ( or, have a default-mapping )</p> <p>To create a new Authgoup or associate the user with an existing authgroup we go to the Configuration Editor, to the module ncs:devices</p> <p>Then we select authgroup \u201c<code>default</code>\u201d</p> <p>At this moment we can make these operations on the \u201cread_user\u201d since we still don\u2019t have not made any change to permissions.</p> <p>Now, inside the \u201cdefault\u201d authgroup we\u2019ve the umap and default-map.</p> <p>The umap, is a mapping for a local user that belongs to this Authgroup.</p> <p>And, we\u2019ve a default-map, this one is a default mapping for each user that belongs to this group.</p> <p>Let\u2019s add our read_user here</p> <p>Now, you can put the remote authentication for the devices that will belong have this authgroup</p> <p>Now, you can choose what will be the credentials that this NSO user will use when connecting to the devices. ( we can use admin-admin for the demo proposes ).</p> <p>Go to the commit manager and commit.</p> <p>Going now back to the \u201cDevice Manager\u201d we can now check the Connect</p> <p>For now, this user can make all the normal operations</p> <p>Let\u2019s start making some restrictions.</p> <p>Go back to the admin user.</p> <p>Then, go to the configuration Editor.</p> <p>And then to the module nacm:nacm</p> <p>In the NACM module you will see the \u201crule-list\u201d and the \u201cgroups\u201d</p> <p>So, to set permissions we need to associate a user to a group, and then associate that group to a rule-list.</p> <p>Let\u2019s create the \u201cread_group\u201d</p> <p>Then we setup one group-id ( 1 for example ) and we add the user \u201cread_user\u201d to that group</p> <p>After this, we can go back and create the rule-list \u201cread_rule\u201d</p> <p>On this rule, we will add the read_group in groups. This means that all the rules that we will setup here, will affect only the users that belong to this group.</p> <p>So, now we\u2019ve 2 options, the cmdrule where list entries are examined for command authorization, and the rule where entries are examined for rpc, notification, and data authorization.</p> <p>Let\u2019s add a rule to deny the sync-from</p> <p>In the rule we\u2019ve to specify a path</p> <p>This path is nothing more than an XPATH. To see how we can get the xpaths, we go back to CLI and we execute the command \u201c<code>show devices device | display xpath</code>\u201d <pre><code>ios-xr-2# exit\ncisco@nso-613:~/NSO-TEST/nso-instance/packages/NTP/src$ ncs_cli -Cu admin\nUser admin last logged in 2022-10-26T10:32:10.740451+00:00, to nso-613, from 198.18.133.252 using webui-http\nadmin connected from 198.18.133.252 using ssh on nso-613\nadmin@ncs# show devices device | display xpath\n/devices/device[name='ios-cli-0']/commit-queue/queue-length 0\n/devices/device[name='ios-cli-0']/active-settings/connect-timeout 20\n/devices/device[name='ios-cli-0']/active-settings/read-timeout 20\n/devices/device[name='ios-cli-0']/active-settings/write-timeout 20\n/devices/device[name='ios-cli-0']/active-settings/connect-timeout 20\n/devices/device[name='ios-cli-0']/active-settings/read-timeout 20\n/devices/device[name='ios-cli-0']/active-settings/write-timeout 20\n&lt;\u2026output omitted for brevity\u2026&gt;\n</code></pre></p> <p>This will show all devices path, if we want to see the paths for each device <pre><code>admin@ncs# config\nadmin@ncs(config)# show full-configuration devices device ios-xr-1 | display xpath\n/devices/device[name='ios-xr-1']/address 127.0.0.1\n/devices/device[name='ios-xr-1']/port 10023  \n\n\n&lt;\u2026output omitted for brevity\u2026&gt;\n/devices/device[name='ios-xr-1']/authgroup default\n/devices/device[name='ios-xr-1']/device-type/cli/ned-id cisco-iosxr-cli-7.38\n/devices/device[name='ios-xr-1']/state/admin-state unlocked\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:domain/name cisco.com\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:domain/name-server[address='2.2.2.2']\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:ntp/peer[address='192.168.22.33']\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:ntp/server/server-list[name='172.16.22.44']/minpoll 8\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:ntp/server/server-list[name='172.16.22.44']/maxpoll 12\n/devices/device[name='ios-xr-1']/config/cisco-ios-xr:vtp/mode off\n</code></pre></p> <p>For example, we can grab the path \u201c<code>/devices/device[name='ios-xr-1']/config/cisco-ios-xr:domain</code>\u201d and block all the operations with the exception of reading.</p> <p>We create the rule \u201cdeny-config-domain\u201d</p> <p>And inside the rule on the data-node we use the path that we just got, we setup the action to deny and access operations we will deny \u201c<code>create,update,delete,exec</code>\u201d</p> <p>To see all the access-operations you can toggle the button near \u201cview options\u201d on the top right and then the info button will appear in each tile.</p> <p>After this, we commit.</p> <p>We logout from the admin user and we login into the read_user.</p> <p>Now we go to the Device Manager and we test our rules. We can check the \u201c<code>ping</code>\u201d, \u201c<code>connect</code>\u201d, \u201c<code>check-sync</code>\u201d and \u201c<code>sync-from</code>\u201d and we will see that the \u201c<code>sync-from</code>\u201d got denied.</p> <p>Now, if we go to the device ios-xr-1 and we go into config/domain we will see that we\u2019re only able to read the info</p> <p>And, if we try to add anything by clicking on the + button we will get the \u201caccess denied\u201d notification.</p> <p>Since we\u2019ve made the rule just for the ios-xr-1 device, if we go to the other devices, for example ios-xr-0 we see that we can still make changes in the domain configuration.</p> <p>To correct this, we need to login into the admin user, and change the PATH of this rule.</p> <p>So, instead of \u201c<code>/devices/device[name='ios-xr-1']/config/cisco-ios-xr:domain/</code>\u201d</p> <p>We will change to \u201c<code>/devices/device/config/cisco-ios-xr:domain/</code>\u201d</p> <p>Commit and go back to the read_user.</p> <p>We can see that after this change, we\u2019re not able to make any change in domain configuration of all the managed devices with this user.</p>"},{"location":"day2/","title":"Day 2","text":"<p>Welcome to Day 2 of the NSO Hands-on Lab.</p> <ul> <li>Advanced NSO topics</li> <li>CI/CD pipeline integration</li> <li>Hands-on with service development</li> </ul> <p>Stay tuned for more advanced labs and discussions.</p>"},{"location":"diagram/","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"}]}